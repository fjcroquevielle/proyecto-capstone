{"ast":null,"code":"import { ACCESS_TOKEN, ACCESS_TOKEN_HEADER, API_ROUTES } from \"../constants\";\n\nclass UsersService {\n  static async signup(signupData) {\n    return fetch(API_ROUTES.SIGNUP, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(signupData)\n    }).then(async res => {\n      const resJson = await res.json();\n\n      if (res.status === 200) {\n        return resJson.message;\n      }\n\n      throw resJson.message;\n    }).catch(err => {\n      throw err;\n    });\n  }\n\n  static async signin(signinData) {\n    return fetch(API_ROUTES.SIGNIN, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(signinData)\n    }).then(async res => {\n      const resJson = await res.json();\n      console.log(resJson);\n\n      if (res.status === 200) {\n        localStorage.setItem(ACCESS_TOKEN, resJson.accessToken);\n        return resJson.user;\n      }\n\n      throw resJson.message;\n    }).catch(err => {\n      throw err;\n    });\n  }\n\n  static async getUsers() {\n    const headers = {};\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.USERS, {\n      method: 'GET',\n      headers\n    }).then(res => {\n      // handle success\n      if (res.status === 200) {\n        return res.json().then(data => {\n          return data.members;\n        });\n      } // handle failure\n\n\n      return [];\n    }).catch(err => {\n      console.error('Caught error: ', err);\n    });\n  }\n\n  static async getUserData() {\n    const headers = {};\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.USER_DATA, {\n      method: 'GET',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.user;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async verifyUser(userData) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.VERIFY, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(userData)\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.user;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async updateSelf(userData) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.UPDATE_SELF, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(userData)\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.user;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async updateUser(userId, userData) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.USERS}/${userId}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(userData)\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.user;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async getUser(userId) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.USERS}/${userId}`, {\n      method: 'GET',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.user;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async deleteUser(userId) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.USERS}/${userId}`, {\n      method: 'DELETE',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        localStorage.setItem(ACCESS_TOKEN, resJson.accessToken);\n        return resJson.deletedUser;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async desregisterUser() {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.DESREGISTER, {\n      method: 'DELETE',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.deletedUser;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async addUser(userData, isMantainer) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(isMantainer ? API_ROUTES.NEW_MANTAINER : API_ROUTES.NEW_GUEST, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(userData)\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.newUser;\n      } // handle failure\n\n\n      throw resJson.message;\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw new Error(err);\n    });\n  }\n\n}\n\nexport { UsersService };","map":{"version":3,"sources":["/Users/camilarendic/Desktop/Capstone/Repositorios/2021-2-S3-Grupo3-Web/src/services/UsersService.js"],"names":["ACCESS_TOKEN","ACCESS_TOKEN_HEADER","API_ROUTES","UsersService","signup","signupData","fetch","SIGNUP","method","headers","body","JSON","stringify","then","res","resJson","json","status","message","catch","err","signin","signinData","SIGNIN","console","log","localStorage","setItem","accessToken","user","getUsers","getItem","USERS","data","members","error","getUserData","USER_DATA","verifyUser","userData","VERIFY","updateSelf","UPDATE_SELF","updateUser","userId","getUser","deleteUser","deletedUser","desregisterUser","DESREGISTER","addUser","isMantainer","NEW_MANTAINER","NEW_GUEST","newUser","Error"],"mappings":"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","sourcesContent":["import { ACCESS_TOKEN, ACCESS_TOKEN_HEADER, API_ROUTES } from \"../constants\";\n\nclass UsersService {\n\n    static async signup(signupData) {\n        return fetch(API_ROUTES.SIGNUP, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain, */*',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(signupData)\n        }).then(async res => {\n            const resJson = await res.json();\n            if (res.status === 200) {\n                return resJson.message;\n            }\n            throw resJson.message;\n        }).catch(err => {\n            throw(err)\n        })\n    }\n\n    static async signin(signinData) {\n        return fetch(API_ROUTES.SIGNIN, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain, */*',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(signinData)\n        }).then(async res => {\n            const resJson = await res.json();\n            console.log(resJson);\n            if (res.status === 200) {\n                localStorage.setItem(ACCESS_TOKEN, resJson.accessToken);\n                return resJson.user;\n            }\n            throw resJson.message;\n        }).catch(err => {\n            throw(err)\n        })\n    }\n\n    static async getUsers() {\n        const headers = {};\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n\n        return fetch(API_ROUTES.USERS, {\n            method: 'GET',\n            headers\n        }).then(res => {\n            // handle success\n            if (res.status === 200) {\n                return res.json().then(data=>{\n                    return data.members;\n                })\n            }\n            // handle failure\n            return [];\n        }).catch(err => {\n            console.error('Caught error: ', err);\n        })\n    }\n\n    \n    static async getUserData() {\n        const headers = {};\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n\n        return fetch(API_ROUTES.USER_DATA, {\n            method: 'GET',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.user;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async verifyUser(userData) {\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch(API_ROUTES.VERIFY, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(userData)\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.user;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async updateSelf(userData) {\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch(API_ROUTES.UPDATE_SELF, {\n            method: 'PUT',\n            headers,\n            body: JSON.stringify(userData)\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.user;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async updateUser(userId, userData) {\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.USERS}/${userId}`, {\n            method: 'PUT',\n            headers,\n            body: JSON.stringify(userData)\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.user;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async getUser(userId) {\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.USERS}/${userId}`, {\n            method: 'GET',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.user;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async deleteUser(userId) {\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.USERS}/${userId}`, {\n            method: 'DELETE',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                localStorage.setItem(ACCESS_TOKEN, resJson.accessToken);\n                return resJson.deletedUser;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async desregisterUser() {\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( API_ROUTES.DESREGISTER, {\n            method: 'DELETE',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.deletedUser;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async addUser(userData, isMantainer){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n\n        return fetch(isMantainer ? API_ROUTES.NEW_MANTAINER : API_ROUTES.NEW_GUEST, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify( userData)\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.newUser;\n            }\n            // handle failure\n            throw resJson.message;\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw new Error(err);\n        })\n    }\n\n\n}\n\nexport { UsersService };"]},"metadata":{},"sourceType":"module"}