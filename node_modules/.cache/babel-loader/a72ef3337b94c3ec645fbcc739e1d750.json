{"ast":null,"code":"import { PROJECT_ACTIONS } from \"../constants\";\nimport { ProjectService } from \"../services\";\nexport const getProjects = () => async dispatch => {\n  try {\n    const projects = await ProjectService.getProjects();\n\n    if (!projects) {\n      throw new Error(\"projects not found.\");\n    }\n\n    dispatch({\n      type: PROJECT_ACTIONS.GET_PROJECTS,\n      payload: projects\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const addProject = projectData => async dispatch => {\n  try {\n    const project = await ProjectService.addProject(projectData);\n\n    if (!project) {\n      throw new Error(\"projects not created.\");\n    }\n\n    dispatch({\n      type: PROJECT_ACTIONS.ADD_PROJECT,\n      payload: project\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const getProjectsAssigned = mantainerId => async dispatch => {\n  try {\n    const projects = await ProjectService.getProjectsAssigned(mantainerId);\n\n    if (!projects) {\n      throw new Error(\"projects not found.\");\n    }\n\n    dispatch({\n      type: PROJECT_ACTIONS.GET_PROJECTS_ASSIGNED,\n      payload: projects\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const selectProject = projectIndex => async dispatch => {\n  try {\n    dispatch({\n      type: PROJECT_ACTIONS.SELECT_PROJECT,\n      payload: projectIndex\n    });\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getProject = projectId => async dispatch => {\n  try {\n    const project = await ProjectService.getProject(projectId);\n\n    if (!project) {\n      throw new Error(`project ${projectId} not found`);\n    }\n\n    dispatch({\n      type: PROJECT_ACTIONS.GET_PROJECT,\n      payload: project\n    });\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"sources":["/Users/camilarendic/Desktop/Capstone/Repositorios/2021-2-S3-Grupo3-Web/src/actions/ProjectActions.js"],"names":["PROJECT_ACTIONS","ProjectService","getProjects","dispatch","projects","Error","type","GET_PROJECTS","payload","error","console","addProject","projectData","project","ADD_PROJECT","getProjectsAssigned","mantainerId","GET_PROJECTS_ASSIGNED","selectProject","projectIndex","SELECT_PROJECT","getProject","projectId","GET_PROJECT"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMH,cAAc,CAACC,WAAf,EAAvB;;AACA,QAAI,CAACE,QAAL,EAAe;AACX,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACDF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,eAAe,CAACO,YADjB;AAELC,MAAAA,OAAO,EAAEJ;AAFJ,KAAD,CAAR;AAIH,GATD,CASE,OAAOK,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACH;AACJ,CAdM;AAgBP,OAAO,MAAME,UAAU,GAAIC,WAAD,IAAiB,MAAOT,QAAP,IAAoB;AAC3D,MAAI;AACA,UAAMU,OAAO,GAAG,MAAMZ,cAAc,CAACU,UAAf,CAA0BC,WAA1B,CAAtB;;AACA,QAAI,CAACC,OAAL,EAAc;AACV,YAAM,IAAIR,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACDF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,eAAe,CAACc,WADjB;AAELN,MAAAA,OAAO,EAAEK;AAFJ,KAAD,CAAR;AAIH,GATD,CASE,OAAOJ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACH;AACJ,CAdM;AAgBP,OAAO,MAAMM,mBAAmB,GAAIC,WAAD,IAAiB,MAAOb,QAAP,IAAoB;AACpE,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMH,cAAc,CAACc,mBAAf,CAAmCC,WAAnC,CAAvB;;AACA,QAAI,CAACZ,QAAL,EAAe;AACX,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACDF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,eAAe,CAACiB,qBADjB;AAELT,MAAAA,OAAO,EAAEJ;AAFJ,KAAD,CAAR;AAIH,GATD,CASE,OAAOK,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACH;AACJ,CAdM;AAgBP,OAAO,MAAMS,aAAa,GAAIC,YAAD,IAAkB,MAAOhB,QAAP,IAAoB;AAC/D,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,eAAe,CAACoB,cADjB;AAELZ,MAAAA,OAAO,EAAEW;AAFJ,KAAD,CAAR;AAIH,GALD,CAKE,OAAOV,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CATM;AAWP,OAAO,MAAMY,UAAU,GAAIC,SAAD,IAAe,MAAOnB,QAAP,IAAoB;AACzD,MAAI;AACA,UAAMU,OAAO,GAAG,MAAMZ,cAAc,CAACoB,UAAf,CAA0BC,SAA1B,CAAtB;;AACA,QAAG,CAACT,OAAJ,EAAY;AACR,YAAM,IAAIR,KAAJ,CAAW,WAAUiB,SAAU,YAA/B,CAAN;AACH;;AACDnB,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,eAAe,CAACuB,WADjB;AAELf,MAAAA,OAAO,EAAEK;AAFJ,KAAD,CAAR;AAIH,GATD,CASE,OAAOJ,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAbM","sourcesContent":["import { PROJECT_ACTIONS } from \"../constants\";\nimport { ProjectService } from \"../services\";\n\nexport const getProjects = () => async (dispatch) => {\n    try {\n        const projects = await ProjectService.getProjects();\n        if (!projects) {\n            throw new Error(\"projects not found.\")\n        }\n        dispatch({\n            type: PROJECT_ACTIONS.GET_PROJECTS,\n            payload: projects\n        })\n    } catch (error) {\n        console.error(error);\n        throw error;\n    }\n}\n\nexport const addProject = (projectData) => async (dispatch) => {\n    try {\n        const project = await ProjectService.addProject(projectData);\n        if (!project) {\n            throw new Error(\"projects not created.\")\n        }\n        dispatch({\n            type: PROJECT_ACTIONS.ADD_PROJECT,\n            payload: project\n        })\n    } catch (error) {\n        console.error(error);\n        throw error;\n    }\n}\n\nexport const getProjectsAssigned = (mantainerId) => async (dispatch) => {\n    try {\n        const projects = await ProjectService.getProjectsAssigned(mantainerId);\n        if (!projects) {\n            throw new Error(\"projects not found.\")\n        }\n        dispatch({\n            type: PROJECT_ACTIONS.GET_PROJECTS_ASSIGNED,\n            payload: projects\n        })\n    } catch (error) {\n        console.error(error);\n        throw error;\n    }\n}\n\nexport const selectProject = (projectIndex) => async (dispatch) => {\n    try {\n        dispatch({\n            type: PROJECT_ACTIONS.SELECT_PROJECT,\n            payload: projectIndex\n        })\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport const getProject = (projectId) => async (dispatch) => {\n    try {\n        const project = await ProjectService.getProject(projectId);\n        if(!project){\n            throw new Error(`project ${projectId} not found`);\n        }\n        dispatch({\n            type: PROJECT_ACTIONS.GET_PROJECT,\n            payload: project\n        })\n    } catch (error) {\n        throw error;\n    }\n}"]},"metadata":{},"sourceType":"module"}