{"ast":null,"code":"var _jsxFileName = \"/Users/camilarendic/Desktop/Capstone/Repositorios/2021-2-S3-Grupo3-Web/src/routes/User.js\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { getUser } from \"../actions\";\nimport { ProjectList } from \"../components\";\nimport { Links } from \"../components/Links\";\nimport { ROUTES } from \"../constants\";\nimport \"./styles/Redico.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    selectedUser: state.UserReducer.selectedUser\n  };\n};\n\nconst initialState = {\n  ready: false\n};\n\nclass User extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.renderProjectList = this.renderProjectList.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ ...this.state,\n      ready: false\n    });\n    const {\n      userId\n    } = this.props.match.params;\n\n    if (userId && (!this.props.selectedUser || this.props.selectedUser.id !== userId)) {\n      this.props.dispatch(getUser(userId)).then(() => {\n        this.setState({ ...this.state,\n          ready: true\n        });\n      }).catch(err => {\n        console.error(err);\n      });\n      return;\n    } else {\n      this.setState({ ...this.state,\n        ready: true\n      });\n    }\n  }\n\n  renderProjectList() {\n    const {\n      userId\n    } = this.props.match.params;\n\n    if (this.state.ready && this.props.selectedUser && this.props.selectedUser.id === parseInt(userId)) {\n      return /*#__PURE__*/_jsxDEV(ProjectList, {\n        targetUser: this.props.selectedUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this);\n    }\n\n    return;\n  }\n\n  render() {\n    var userDisplayed = this.props.currentUser ? this.props.currentUser.username : \"\";\n    userDisplayed = this.props.selectedUser ? this.props.selectedUser.username : userDisplayed;\n    const links = [{\n      link: ROUTES.MY_ORG,\n      name: 'Users'\n    }, {\n      link: '#',\n      name: userDisplayed\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content main-active\",\n      children: [/*#__PURE__*/_jsxDEV(Links, {\n        links: links\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-align\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-side-panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-content\",\n          children: this.renderProjectList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst ConnectedUser = connect(mapStateToProps)(User);\nconst UserWithRouter = withRouter(ConnectedUser);\n_c = UserWithRouter;\nexport { UserWithRouter as User };\n\nvar _c;\n\n$RefreshReg$(_c, \"UserWithRouter\");","map":{"version":3,"sources":["/Users/camilarendic/Desktop/Capstone/Repositorios/2021-2-S3-Grupo3-Web/src/routes/User.js"],"names":["Component","connect","withRouter","getUser","ProjectList","Links","ROUTES","mapStateToProps","state","selectedUser","UserReducer","initialState","ready","User","constructor","props","renderProjectList","bind","componentDidMount","setState","userId","match","params","id","dispatch","then","catch","err","console","error","parseInt","render","userDisplayed","currentUser","username","links","link","MY_ORG","name","ConnectedUser","UserWithRouter"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { getUser } from \"../actions\";\nimport { ProjectList } from \"../components\";\nimport { Links } from \"../components/Links\";\nimport { ROUTES } from \"../constants\";\n\nimport \"./styles/Redico.css\";\n\n\nconst mapStateToProps = state => {\n    return { \n        selectedUser: state.UserReducer.selectedUser \n    };\n};\n\nconst initialState = {\n    ready: false,\n}\n\nclass User extends Component{\n    constructor(props){\n        super(props);\n        this.state = initialState;\n\n        this.renderProjectList = this.renderProjectList.bind(this);\n    }\n\n\n    componentDidMount() {\n        this.setState({...this.state, ready: false});\n        const { userId } = this.props.match.params;\n        if (userId && (!this.props.selectedUser || this.props.selectedUser.id !== userId)) {\n            this.props.dispatch(getUser(userId)).then(() => {\n                this.setState({...this.state, ready: true});\n            }).catch((err) => {\n                console.error(err);\n            });\n            return;\n        } else {\n            this.setState({...this.state, ready: true});\n        }\n    }\n\n    renderProjectList() {\n        const { userId } = this.props.match.params;\n        if (this.state.ready && this.props.selectedUser && this.props.selectedUser.id === parseInt(userId)) {\n            return(\n                <ProjectList targetUser={this.props.selectedUser}/>\n            )\n        }\n        return;\n    }\n    \n    render(){\n        var userDisplayed = this.props.currentUser? this.props.currentUser.username : \"\";\n        userDisplayed = this.props.selectedUser ? this.props.selectedUser.username : userDisplayed;\n\n        const links = [\n            {\n                link: ROUTES.MY_ORG,\n                name: 'Users'\n            },\n            {\n                link: '#',\n                name: userDisplayed\n            },\n        ]\n\n\n        return(\n            <div className='main-content main-active'>\n\n                <Links links={links}/>\n                    <div className='content-align'>\n                        <div className='mini-side-panel'>\n\n                        </div>\n                        <div className='content-content'>\n                            {this.renderProjectList()}\n                        </div>\n                    </div>\n            </div>\n        )\n    }\n}\n\nconst ConnectedUser = connect(mapStateToProps)(User);\n\nconst UserWithRouter = withRouter(ConnectedUser)\n\nexport {UserWithRouter as User};"]},"metadata":{},"sourceType":"module"}