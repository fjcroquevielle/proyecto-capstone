{"ast":null,"code":"import { ACCESS_TOKEN, ACCESS_TOKEN_HEADER, API_ROUTES } from \"../constants\";\n\nclass ProjectService {\n  static async getProjects() {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.PROJECTS, {\n      method: 'GET',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.projects;\n      } // handle failure\n\n\n      throw new Error(resJson.message);\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async addProject(projectData) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(API_ROUTES.PROJECTS, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(projectData)\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.project;\n      }\n\n      console.error(resJson); // handle failure\n\n      throw new Error(resJson.message);\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async getProjectsAssigned(mantainerId) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.PROJECTS_ASSIGNED}/${mantainerId}`, {\n      method: 'GET',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.projects;\n      } // handle failure\n\n\n      throw new Error(resJson.message);\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async getProject(projectId) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.PROJECTS}/${projectId}`, {\n      method: 'GET',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.project;\n      } // handle failure\n\n\n      throw new Error(resJson.message);\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n}\n\nexport { ProjectService };","map":{"version":3,"sources":["/Users/camilarendic/Desktop/Capstone/Repositorios/2021-2-S3-Grupo3-Web/src/services/ProjectService.js"],"names":["ACCESS_TOKEN","ACCESS_TOKEN_HEADER","API_ROUTES","ProjectService","getProjects","headers","localStorage","getItem","fetch","PROJECTS","method","then","res","resJson","json","status","projects","Error","message","catch","err","console","error","addProject","projectData","body","JSON","stringify","project","getProjectsAssigned","mantainerId","PROJECTS_ASSIGNED","getProject","projectId"],"mappings":"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","sourcesContent":["import { ACCESS_TOKEN, ACCESS_TOKEN_HEADER, API_ROUTES } from \"../constants\";\n\nclass ProjectService {\n    static async getProjects(){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( API_ROUTES.PROJECTS, {\n            method: 'GET',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.projects;\n            }\n            // handle failure\n            throw new Error(resJson.message);\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async addProject(projectData){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( API_ROUTES.PROJECTS, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(projectData)\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.project;\n            }\n            console.error(resJson);\n            // handle failure\n            throw new Error(resJson.message);\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n    \n    static async getProjectsAssigned(mantainerId){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.PROJECTS_ASSIGNED}/${mantainerId}`, {\n            method: 'GET',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.projects;\n            }\n            // handle failure\n            throw new Error(resJson.message);\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n    \n    static async getProject(projectId){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.PROJECTS}/${projectId}`, {\n            method: 'GET',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.project;\n            }\n            // handle failure\n            throw new Error(resJson.message);\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n}\n\nexport {ProjectService};"]},"metadata":{},"sourceType":"module"}