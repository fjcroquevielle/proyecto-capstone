{"ast":null,"code":"import { ACCESS_TOKEN, ACCESS_TOKEN_HEADER, API_ROUTES } from \"../constants\";\n\nclass OrganizationService {\n  static async getOrganization(orgId) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.ORGANIZATIONS}/${orgId}`, {\n      method: 'GET',\n      headers\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.organization;\n      } // handle failure\n\n\n      throw new Error(resJson.message);\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n  static async updateOrganization(orgId, orgData) {\n    const headers = {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    };\n    headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n    return fetch(`${API_ROUTES.ORGANIZATIONS}/${orgId}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(orgData)\n    }).then(async res => {\n      const resJson = await res.json(); // handle success\n\n      if (res.status === 200) {\n        return resJson.organization;\n      } // handle failure\n\n\n      throw new Error(resJson.message);\n    }).catch(err => {\n      console.error('Caught error: ', err);\n      throw err;\n    });\n  }\n\n}\n\nexport { OrganizationService };","map":{"version":3,"sources":["/Users/camilarendic/Desktop/Capstone/Repositorios/2021-2-S3-Grupo3-Web/src/services/OrganizationService.js"],"names":["ACCESS_TOKEN","ACCESS_TOKEN_HEADER","API_ROUTES","OrganizationService","getOrganization","orgId","headers","localStorage","getItem","fetch","ORGANIZATIONS","method","then","res","resJson","json","status","organization","Error","message","catch","err","console","error","updateOrganization","orgData","body","JSON","stringify"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,mBAAvB,EAA4CC,UAA5C,QAA8D,cAA9D;;AAEA,MAAMC,mBAAN,CAA0B;AACM,eAAfC,eAAe,CAACC,KAAD,EAAO;AAC/B,UAAMC,OAAO,GAAG;AACZ,gBAAU,mCADE;AAEZ,sBAAgB;AAFJ,KAAhB;AAIAA,IAAAA,OAAO,CAACL,mBAAD,CAAP,GAA+BM,YAAY,CAACC,OAAb,CAAqBR,YAArB,CAA/B;AACA,WAAOS,KAAK,CAAG,GAAEP,UAAU,CAACQ,aAAc,IAAGL,KAAM,EAAvC,EAA0C;AAClDM,MAAAA,MAAM,EAAE,KAD0C;AAElDL,MAAAA;AAFkD,KAA1C,CAAL,CAGJM,IAHI,CAGC,MAAMC,GAAN,IAAa;AACjB,YAAMC,OAAO,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAtB,CADiB,CAEjB;;AACA,UAAIF,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACpB,eAAOF,OAAO,CAACG,YAAf;AACH,OALgB,CAMjB;;;AACA,YAAM,IAAIC,KAAJ,CAAUJ,OAAO,CAACK,OAAlB,CAAN;AACH,KAXM,EAWJC,KAXI,CAWEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACA,YAAMA,GAAN;AACH,KAdM,CAAP;AAeH;;AAE8B,eAAlBG,kBAAkB,CAACnB,KAAD,EAAQoB,OAAR,EAAgB;AAC3C,UAAMnB,OAAO,GAAG;AACZ,gBAAU,mCADE;AAEZ,sBAAgB;AAFJ,KAAhB;AAIAA,IAAAA,OAAO,CAACL,mBAAD,CAAP,GAA+BM,YAAY,CAACC,OAAb,CAAqBR,YAArB,CAA/B;AACA,WAAOS,KAAK,CAAG,GAAEP,UAAU,CAACQ,aAAc,IAAGL,KAAM,EAAvC,EAA0C;AAClDM,MAAAA,MAAM,EAAE,KAD0C;AAElDL,MAAAA,OAFkD;AAGlDoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf;AAH4C,KAA1C,CAAL,CAIJb,IAJI,CAIC,MAAMC,GAAN,IAAa;AACjB,YAAMC,OAAO,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAtB,CADiB,CAEjB;;AACA,UAAIF,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACpB,eAAOF,OAAO,CAACG,YAAf;AACH,OALgB,CAMjB;;;AACA,YAAM,IAAIC,KAAJ,CAAUJ,OAAO,CAACK,OAAlB,CAAN;AACH,KAZM,EAYJC,KAZI,CAYEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACA,YAAMA,GAAN;AACH,KAfM,CAAP;AAgBH;;AA9CqB;;AAiD1B,SAAQlB,mBAAR","sourcesContent":["import { ACCESS_TOKEN, ACCESS_TOKEN_HEADER, API_ROUTES } from \"../constants\";\n\nclass OrganizationService {\n    static async getOrganization(orgId){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.ORGANIZATIONS}/${orgId}`, {\n            method: 'GET',\n            headers\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.organization;\n            }\n            // handle failure\n            throw new Error(resJson.message);\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n\n    static async updateOrganization(orgId, orgData){\n        const headers = {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        };\n        headers[ACCESS_TOKEN_HEADER] = localStorage.getItem(ACCESS_TOKEN);\n        return fetch( `${API_ROUTES.ORGANIZATIONS}/${orgId}`, {\n            method: 'PUT',\n            headers,\n            body: JSON.stringify(orgData)\n        }).then(async res => {\n            const resJson = await res.json();\n            // handle success\n            if (res.status === 200) {\n                return resJson.organization;\n            }\n            // handle failure\n            throw new Error(resJson.message);\n        }).catch(err => {\n            console.error('Caught error: ', err);\n            throw err;\n        })\n    }\n}\n\nexport {OrganizationService};"]},"metadata":{},"sourceType":"module"}